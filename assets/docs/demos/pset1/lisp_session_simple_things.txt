  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (setf x1 5)
5
[2]> (setf y1 6)
6
[3]> (setf x2 7)
7
[4]> (setf y2 8)
8
[5]> (setf dist (sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))
2.828427
[6]> (caddr '(A B X C D))
X
[7]> (caaddr '(A B (X) C D))
X
[8]> (car (cdr (car (cdr (car '((A (B X C D))))))))
X
[9]> (setf colors '(blue yellow pink orange black white grey))
(BLUE YELLOW PINK ORANGE BLACK WHITE GREY)
[10]> (quote colors)
COLORS
[11]> 'colors
COLORS
[12]> colors
(BLUE YELLOW PINK ORANGE BLACK WHITE GREY)
[13]> (describe 'colors)

COLORS is the symbol COLORS, lies in #<PACKAGE COMMON-LISP-USER>, is accessible in 1 package
COMMON-LISP-USER, a variable, value: (BLUE YELLOW PINK ORANGE BLACK WHITE GREY).

 #<PACKAGE COMMON-LISP-USER> is the package named COMMON-LISP-USER. It has 2 nicknames CL-USER,
 USER.
 It imports the external symbols of 2 packages COMMON-LISP, EXT and exports no symbols, but no
 package uses these exports.

 (BLUE YELLOW PINK ORANGE BLACK WHITE GREY) is a list of length 7.

[14]> (describe colors)

(BLUE YELLOW PINK ORANGE BLACK WHITE GREY) is a list of length 7.

[15]> (type-of 'colors)
SYMBOL
[16]> (type-of colors)
CONS
[17]> (typep colors 'cons)
T
[18]> (typep colors 'list)
T
[19]> (typep colors 'symbol)
NIL
[20]> (typep 'colors 'cons)
NIL
[21]> (typep 'colors 'symbol)
T
[22]> [27]> (setf clubs '((10 C) (J C) (Q C) (K C) (A C)))
((10 C) (J C) (Q C) (K C) (A C))
[23]> clubs
((10 C) (J C) (Q C) (K C) (A C))
[24]> (setf diamonds '((10 D) (J C) (Q D) (K D) (A D)))
((10 D) (J C) (Q D) (K D) (A D))
[25]> diamonds
((10 D) (J C) (Q D) (K D) (A D))
[26]> (setf hearts '((10 H) (J H) (Q H) (K H) (A H)))
((10 H) (J H) (Q H) (K H) (A H))
[27]> hearts
((10 H) (J H) (Q H) (K H) (A H))
[28]> (setf spades '((10 S) (J S) (Q S) (K S) (A S)))
((10 S) (J S) (Q S) (K S) (A S))
[29]> spades
((10 S) (J S) (Q S) (K S) (A S))
[30]> (setf deck (append clubs diamonds hearts spades))
((10 C) (J C) (Q C) (K C) (A C) (10 D) (J C) (Q D) (K D) (A D) (10 H) (J H) (Q H) (K H) (A H) (10 S)
 (J S) (Q S) (K S) (A S))
[31]> deck
((10 C) (J C) (Q C) (K C) (A C) (10 D) (J C) (Q D) (K D) (A D) (10 H) (J H) (Q H) (K H) (A H) (10 S)
 (J S) (Q S) (K S) (A S))
[32]> (setf partitioned-deck (list clubs diamonds hearts spades))
(((10 C) (J C) (Q C) (K C) (A C)) ((10 D) (J C) (Q D) (K D) (A D)) ((10 H) (J H) (Q H) (K H) (A H))
 ((10 S) (J S) (Q S) (K S) (A S)))
[33]> partitioned-deck
(((10 C) (J C) (Q C) (K C) (A C)) ((10 D) (J C) (Q D) (K D) (A D)) ((10 H) (J H) (Q H) (K H) (A H))
 ((10 S) (J S) (Q S) (K S) (A S)))
[34]> (bye)
Bye.